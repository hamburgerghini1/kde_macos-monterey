# scalac
# Autogenerated from man page /usr/share/man/man1/scalac.1.gz
complete -c scalac -o Dproperty -d 'Pass -Dproperty=value  directly to the runtime system'
complete -c scalac -o 'J<flag>' -d 'Pass <flag> directly to the runtime system'
complete -c scalac -o 'P:<plugin:opt>' -d 'Pass an option to a plugin'
complete -c scalac -s X -d 'Print a synopsis of advanced options'
complete -c scalac -o bootclasspath -d 'Override location of bootstrap class files (where to find the standard built-…'
complete -c scalac -o classpath -d 'Specify where to find user class files (on Unix-based systems a colon-separat…'
complete -c scalac -s d -d 'Specify where to place generated class files'
complete -c scalac -o deprecation -d 'Emit warning and location for usages of deprecated APIs'
complete -c scalac -o encoding -d 'Specify character encoding used by source files'
complete -c scalac -o explaintypes -d 'Explain type errors in more detail'
complete -c scalac -o extdirs -d 'Override location of installed extensions'
complete -c scalac -o feature -d 'Emit warning and location for usages of features that should be imported expl…'
complete -c scalac -o help -d 'Print a synopsis of standard options'
complete -c scalac -o javabootclasspath -d 'Override Java boot classpath'
complete -c scalac -o javaextdirs -d 'Override Java extdirs classpath'
complete -c scalac -o 'language:<feature>' -d 'Enable one or more language features'
complete -c scalac -o no-specialization -d 'Ignore @specialize annotations'
complete -c scalac -o nobootcp -d 'Do not use the boot classpath for the Scala jar files'
complete -c scalac -o nowarn -d 'Generate no warnings'
complete -c scalac -o optimise -d 'Generates faster bytecode by applying optimisations to the program'
complete -c scalac -o print -d 'Print program with all Scala-specific features removed'
complete -c scalac -o sourcepath -d 'Specify location(s) of source files'
complete -c scalac -o toolcp -d 'Add to the runner classpath'
complete -c scalac -o unchecked -d 'Enable detailed unchecked (erasure) warnings'
complete -c scalac -o uniqid -d 'Uniquely tag all identifiers in debugging output'
complete -c scalac -o usejavacp -d 'Utilize the java. class. path in classpath resolution'
complete -c scalac -o usemanifestcp -d 'Utilize the manifest in classpath resolution'
complete -c scalac -o verbose -d 'Output messages about what the compiler is doing'
complete -c scalac -o version -d 'Print product version and exit'
complete -c scalac -o Xcheckinit -d 'Wrap field accessors to throw an exception on uninitialized access'
complete -c scalac -o Xdev -d 'Enable warnings for developers working on the Scala compiler'
complete -c scalac -o Xdisable-assertions -d 'Generate no assertions and assumptions'
complete -c scalac -o Xelide-below -d 'Calls to @elidable methods are omitted if method priority is lower than argum…'
complete -c scalac -o Xfatal-warnings -d 'Fail the compilation if there are any warnings'
complete -c scalac -o Xfull-lubs -d 'Retain pre 2. 10 behavior of less aggressive truncation of least upper bounds'
complete -c scalac -o Xgenerate-phase-graph -d 'Generate the phase graphs (outputs . dot files) to fileX. dot'
complete -c scalac -o Xlint -d 'Enable recommended additional warnings'
complete -c scalac -o Xlog-free-terms -d 'Print a message when reification creates a free term'
complete -c scalac -o Xlog-free-types -d 'Print a message when reification resorts to generating a free type'
complete -c scalac -o Xlog-implicit-conversions -d 'Print a message whenever an implicit conversion is inserted'
complete -c scalac -o Xlog-reflective-calls -d 'Print a message when a reflective method call is generated'
complete -c scalac -o 'Xmacro-settings:<option>' -d 'Custom settings for macros'
complete -c scalac -o Xmain-class -d 'Class for manifest\'s Main-Class entry (only useful with -d <jar>)'
complete -c scalac -o 'Xmigration:<version>' -d 'Warn about constructs whose behavior may have changed since<version>'
complete -c scalac -o Xno-forwarders -d 'Do not generate static forwarders in mirror classes'
complete -c scalac -o Xno-patmat-analysis -d 'Don\'t perform exhaustivity/unreachability analysis'
complete -c scalac -o Xjline -d 'The JLine keybindings to use: emacs/vi/off'
complete -c scalac -o 'Xplugin:<paths>' -d 'Load a plugin from each classpath'
complete -c scalac -o 'Xplugin-disable:<plugin>' -d 'Disable plugins by name'
complete -c scalac -o Xplugin-list -d 'Print a synopsis of loaded plugins'
complete -c scalac -o 'Xplugin-require:<plugin>' -d 'Abort if a named plugin is not loaded'
complete -c scalac -o Xpluginsdir -d 'Path to search for plugin archives'
complete -c scalac -o 'Vprint:<phases>' -d 'Print out program after <phases> (see below)'
complete -c scalac -o Vprint-pos -d 'Print tree positions, as offsets'
complete -c scalac -o Vprint-types -d 'Print tree types (debugging option)'
complete -c scalac -o Xprompt -d 'Display a prompt after each error (debugging option)'
complete -c scalac -o Xresident -d 'Compiler stays resident, files to compile are read from standard input'
complete -c scalac -o Xscript -d 'Treat the source file as a script and wrap it in a main method'
complete -c scalac -o Xshow-class -d 'Show internal representation of class'
complete -c scalac -o Xshow-object -d 'Show internal representation of object'
complete -c scalac -o Xshow-phases -d 'Print a synopsis of compiler phases'
complete -c scalac -o 'Xsource:<version>' -d 'Treat compiler input as Scala source for the specified version, see scala/bug…'
complete -c scalac -o Xsource-reader -d 'Specify a custom method for reading source files'
complete -c scalac -o Xstrict-inference -d 'Don\'t infer known-unsound types'
complete -c scalac -o Xverify -d 'Verify generic signatures in generated bytecode (asm backend only)'
complete -c scalac -s Y -d 'Print a synopsis of private options. \\" '

